# -*- coding: utf-8 -*-
"""Car Prediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1q_YfQDqq5_quVox2m0ORaclALBdbW6s8

Import the dependencies
"""

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.linear_model import Lasso
from sklearn import metrics
from google.colab.data_table import DataTable
from sklearn.metrics import mean_squared_error

"""Data Collection & Processing"""

#loding the data from csv file to pandas dataframe
DataTable.max_columns = 30
car_csvdata = pd.read_csv('/content/sample_data/CarPrice_Assignment.csv')

#Inspecting the first five rows of the dataframe
car_csvdata.head()

car_csvdata.shape

#getting more information about the dataset
car_csvdata.info()

# checking the number of missing values
car_csvdata.isnull().sum()

# checking the distribution of categorical data
print(car_csvdata.fueltype.value_counts())
print(car_csvdata.aspiration.value_counts())
print(car_csvdata.doornumber.value_counts())
print(car_csvdata.carbody.value_counts())
print(car_csvdata.drivewheel.value_counts())
print(car_csvdata.enginelocation.value_counts())
print(car_csvdata.enginetype.value_counts())
print(car_csvdata.cylindernumber.value_counts())
print(car_csvdata.fuelsystem.value_counts())

"""Encoding the Categorical Data"""

#Encoding the "Fuel_Type Column"
car_csvdata.replace({'fueltype':{'gas':0,'diesel':1}},inplace=True)

#Encoding the "Aspiration Column"
car_csvdata.replace({'aspiration':{'std':0,'turbo':1}},inplace=True)

#Encoding the "DoorNo Column"
car_csvdata.replace({'doornumber':{'four':4,'two':2}},inplace=True)

#Encoding the "Carbody Column"
car_csvdata.replace({'carbody':{'sedan':0,'hatchback':1,'wagon':2,'hardtop':3,'convertible':4}},inplace=True)

#Encoding the "DriveWheel Column"
car_csvdata.replace({'drivewheel':{'fwd':0,'rwd':1,'4wd':2}},inplace=True)

#Encoding the "Engine Location Column"
car_csvdata.replace({'enginelocation':{'front':0,'rear':1,}},inplace=True)

#Encoding the "Engine Type Column"
car_csvdata.replace({'enginetype':{'ohc':0,'ohcf':1,'ohcv':2,'dohc':3,'l':4,'rotor':5,'dohcv':6}},inplace=True)

#Encoding the "Cylinder Number"
car_csvdata.replace({'cylindernumber':{'four':4,'six':6,'five':5,'eight':8,'two':2,'three':3,'twelve':12}},inplace=True)

#Encoding the "Fuel Systemr"
car_csvdata.replace({'fuelsystem':{'mpfi':0,'2bbl':1,'idi':2,'1bbl':2,'spdi':3,'4bbl':4,'mfi':5,'spfi':5}},inplace=True)

car_csvdata.head()

"""Data Cleaning"""

car_csvdata.CarName.unique()

CompanyName = car_csvdata['CarName'].apply(lambda x : x.split(' ')[0])

car_csvdata.insert(3,"CompanyName",CompanyName)
car_csvdata.drop(['CarName'],axis=1,inplace=True)
car_csvdata.head()

car_csvdata.CompanyName.unique()

car_csvdata.CompanyName = car_csvdata.CompanyName.str.lower()
car_csvdata.CompanyName.replace('maxda','mazda',inplace=True)
car_csvdata.CompanyName.replace('porcshce','porsche',inplace=True)
car_csvdata.CompanyName.replace('toyouta','toyota',inplace=True)
car_csvdata.CompanyName.replace('vokswagen','volkswagen',inplace=True)
car_csvdata.CompanyName.replace('vw','volkswagen',inplace=True)
car_csvdata.CompanyName.unique()

"""Spliiting the datasets into training and test data"""

X=car_csvdata.drop(['CompanyName','price','car_ID'],axis=1)
Y=car_csvdata['price']

print(X)

print(Y)

TrainingData,TestData,PriceTrainingData,PriceTestData = train_test_split(X,Y,test_size=0.1,random_state=3)

"""Model Training:Linear Regression"""

lin_reg_model = LinearRegression()

lin_reg_model.fit(TrainingData,PriceTrainingData)

"""Model Evaulation"""

#Predicting the car price using Training data
training_data_prediction = lin_reg_model.predict(TrainingData)

#R squared Error
error_score = metrics.r2_score(PriceTrainingData,training_data_prediction)
print("R squared Error:",error_score)

"""Visualizing the actual price & predicted price for training data & test data"""

plt.scatter(PriceTrainingData,training_data_prediction)
plt.xlabel("Actual Price")
plt.ylabel("Predicted Price")
plt.title("Actual prices vs Predicted Prices")
plt.show()

#Predicting the car price using test data
test_data_prediction = lin_reg_model.predict(TestData)

#R squared Error
error_score = metrics.r2_score(PriceTestData,test_data_prediction)
print("R squared Error:",error_score)

plt.scatter(PriceTestData,test_data_prediction)
plt.xlabel("Actual Price")
plt.ylabel("Predicted Price")
plt.title("Actual prices vs Predicted Prices")
plt.show()